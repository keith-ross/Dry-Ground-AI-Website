I'll provide a detailed explanation of the complete system we've built and what we're currently trying to accomplish.

## 🎯 Overall Goal: AI Agent Website Interaction System

We've built a sophisticated system that allows an **AI agent (ElevenLabs)** to interact with **specific browser tabs/pages** on your website in real-time. Here's the complete breakdown:

## 🏗️ System Architecture

### 1. **Session Management Layer**
- **Purpose**: Uniquely identify each open browser tab/page
- **Implementation**: `src/lib/sessionManager.ts`
- **How it works**: 
  - Each time a page loads, it generates or retrieves a unique `sessionId` (format: `session_1641234567890_k3m5n8p2q`)
  - Stored in `sessionStorage` so it persists within the same tab but creates new IDs for new tabs
  - The session ID bridges the gap between your website and the AI agent

### 2. **Frontend Integration Layer**
- **Purpose**: Connect each page to the session system and prepare for agent commands
- **Implementation**: Modified all your pages (`HomePage.tsx`, `HealthcareDemo.tsx`, etc.)
- **What we added**:
  ```typescript
  // Generate/get session ID
  const [sessionId, setSessionId] = useState<string>('');
  const currentSessionId = getSessionId();
  
  // Pass to ElevenLabs agent
  <elevenlabs-convai 
    agent-id="..."
    dynamic-variables={JSON.stringify({ website_session_id: sessionId })}
  />
  
  // Listen for agent commands (WebSocket)
  useAgentCommands(sessionId);
  
  // Define navigable sections
  <section id="hero">...</section>
  <section id="services">...</section>
  ```

### 3. **Real-Time Communication Layer**
- **Purpose**: Enable the AI agent to send commands to the correct browser tab instantly
- **Implementation**: WebSocket system
- **Components**:
  - **Backend WebSocket Server**: Runs on port 3003, manages connections per session
  - **Frontend WebSocket Client**: `src/hooks/useAgentCommands.ts` (deleted in error)
  - **Connection Mapping**: Server maintains a map of `sessionId → WebSocket connection`

### 4. **Agent Command Processing Layer**
- **Purpose**: Allow the AI agent to trigger actions on the website
- **Implementation**: 
  - **API Endpoint**: `POST /api/interact/{page_name}/navigate`
  - **Valid Sections**: Predefined section IDs for each page type
  - **Navigation Logic**: Smooth scrolling to specific page sections

## 🔄 Complete User Flow

```mermaid
sequenceDiagram
    participant User
    participant Website
    participant ElevenLabs
    participant Backend
    participant WebSocket

    User->>Website: Opens page in browser
    Website->>Website: Generate sessionId
    Website->>ElevenLabs: Pass sessionId via dynamic-variables
    Website->>WebSocket: Connect with sessionId
    WebSocket->>Backend: Store connection mapping
    
    User->>ElevenLabs: "Show me the services section"
    ElevenLabs->>Backend: POST /api/interact/homepage/navigate
    Note over ElevenLabs,Backend: {sessionId: "session_123", section: "services"}
    Backend->>WebSocket: Send navigate command
    WebSocket->>Website: Receive command
    Website->>Website: Smooth scroll to #services
    Website->>User: Page scrolls to services section
```

## 🎮 What We're Currently Testing

Right now, we're trying to verify that the **WebSocket communication system** works properly. Here's what should happen:

### Test Scenario:
1. **Server Startup**: Backend starts with both HTTP server (port 3001) and WebSocket server (port 3003)
2. **WebSocket Connection**: Frontend connects to `ws://localhost:3003?sessionId=test_123`
3. **API Call Simulation**: Send POST request to `/api/interact/homepage/navigate` with:
   ```json
   {
     "sessionId": "test_123",
     "section": "hero"
   }
   ```
4. **Expected Result**: 
   - WebSocket receives navigation command
   - Frontend smooth-scrolls to the hero section
   - Console shows successful navigation logs

## 🚨 Current Issues

The server is failing to start because:
1. **Missing Environment Variables**: The server requires `DATABASE_URL` but `.env` file is missing
2. **WebSocket Dependencies**: Need to ensure `ws` package is properly configured
3. **TypeScript Loading**: Server startup showing loader warnings

## 🛠️ What We Need to Fix

1. **Create proper `.env` file** with required database configuration
2. **Verify WebSocket server initialization** in `server.ts`
3. **Test the complete flow**: Session ID → ElevenLabs → API → WebSocket → Frontend Navigation

## 💡 Real-World Use Case

Once working, your AI agent can say things like:
- *"Let me show you our services"* → Instantly scrolls to services section
- *"Here are our case studies"* → Navigates to case studies
- *"Let's look at pricing"* → Moves to pricing section

The user experiences seamless, guided navigation while talking to the AI agent, making the conversation much more interactive and engaging.

Would you like me to fix the server startup issues so we can test the complete system?